package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"GraphQL_demo/graph/generated"
	"GraphQL_demo/graph/model"
	"context"
	"math/big"
	"strconv"
)

// Block is the resolver for the block field.
func (r *queryResolver) Block(ctx context.Context, number string) (*model.Block, error) {
	blockNumber := new(big.Int)
	blockNumber.SetString(number, 10)

	block, err := r.EthClient.BlockByNumber(ctx, blockNumber)
	if err != nil {
		return nil, err
	}

	transactions := make([]string, len(block.Transactions()))
	for i, tx := range block.Transactions() {
		transactions[i] = tx.Hash().Hex()
	}

	return &model.Block{
		Number:       block.Number().String(),
		Hash:         block.Hash().Hex(),
		ParentHash:   block.ParentHash().Hex(),
		Nonce:        strconv.FormatUint(block.Nonce(), 10),
		Transactions: transactions,
	}, nil
}

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
